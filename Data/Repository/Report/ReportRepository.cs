using Microsoft.EntityFrameworkCore;
using SSRNMFSSN.Data.Models;
using SSRNMFSSN.Repository.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace SSRNMFSSN.Repository
{
    public class ReportRepository
    {
        protected readonly SSRNMFSSNContext _dbContext;

        public ReportRepository(SSRNMFSSNContext context)
        {
            _dbContext = context;
        }

        #region base
        public virtual T GetById<T>(int Id) where T : class
        {
            var temp = _dbContext.Set<T>().Find(Id);
            return temp;
        }

        public async Task<T> GetByIdAsync<T>(int Id) where T : class
        {
            return await _dbContext.Set<T>().FindAsync(Id);
        }

        public virtual IEnumerable<T> GetAll<T>() where T : class
        {
            try
            {
                return _dbContext.Set<T>().ToList();
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public IEnumerable<T> Query<T>(Expression<Func<T, T>> expression) where T : class
        {
            try
            {
                return _dbContext.Set<T>().Select(expression);
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public async Task<IEnumerable<T>> GetAllAsync<T>() where T : class
        {
            return await _dbContext.Set<T>().ToListAsync();
        }

        public int Count<T>() where T : class
        {
            return _dbContext.Set<T>().Count<T>();
        }

        public async Task<int> CountAsync<T>() where T : class
        {
            return await _dbContext.Set<T>().CountAsync<T>();
        }

        public IEnumerable<T> Find<T>(Expression<Func<T, bool>> predicate) where T : class
        {
            return _dbContext.Set<T>().Where(predicate);
        }

        public async Task<IEnumerable<T>> FindAsync<T>(Expression<Func<T, bool>> predicate) where T : class
        {
            var set = await _dbContext.Set<T>().ToListAsync();
            return set.AsQueryable().Where(predicate);
        }

        //we don't need an async version of this 
        //about AddAsync https://docs.microsoft.com/en-us/ef/core/api/microsoft.entityframeworkcore.dbset-1#Microsoft_EntityFrameworkCore_DbSet_1_AddAsync__0_System_Threading_CancellationToken_
        //This method is async only to allow special value generators, 
        //such as the one used by 'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo', 
        //to access the database asynchronously.For all other cases the non async method should be used.
        public virtual T Add<T>(T entity) where T : class
        {
            T returnMe = _dbContext.Set<T>().Add(entity).Entity;
            SaveChanges();
            return returnMe;
        }

        public async Task<int> CompleteAsync()
        {
            return await _dbContext.SaveChangesAsync();
        }

        //we don't need an async version of this
        public virtual void Remove<T>(T entity) where T : class
        {
            _dbContext.Set<T>().Remove(entity);
        }


        public virtual T Save<T>(T entity, int id) where T : class
        {
            return SetValues(id, entity);
        }

        public virtual T UpdateEntity<T>(T entity) where T : class
        {
            //the EF 2 way, for entities with autogenerated ids
            //_dbContext.Entry(entity).State = EntityState.Modified;
            var returnMe = _dbContext.Update(entity);
            saveChanges();
            return returnMe.Entity;
        }

        public virtual T SetValues<T>(int id, T entity) where T : class
        {
            if (entity == null)
            {
                return null;
            }

            T existing = _dbContext.Set<T>().Find(id);

            if (existing != null)
            {
                _dbContext.Entry(existing).CurrentValues.SetValues(entity);
                saveChanges();
            }

            return entity;
        }


        private void saveChanges()
        {
            //handles concurrent modifications
            bool saveFailed;
            do
            {
                saveFailed = false;
                try
                {
                    _dbContext.SaveChanges();
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    saveFailed = true;

                    // Update original values from the database
                    var entry = ex.Entries.Single();
                    entry.OriginalValues.SetValues(entry.GetDatabaseValues());
                }

            } while (saveFailed);
        }



        public void SaveChanges()
        {
            saveChanges();
        }

        private T stripVirtualProperties<T>(T entity) where T : class
        {
            var props = typeof(T).GetProperties().Where(prop => prop.GetGetMethod().IsVirtual);

            foreach (var prop in props)
            {
                prop.SetValue(entity, null);
            }

            return entity;
        }

        #endregion

        #region trial

        public SsrnmTrial CreateSsrnmTrial(SsrnmTrial obj)
        {
            SsrnmTrial ssrnmTrial = null;
            try
            {
                ssrnmTrial = obj;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            return ssrnmTrial;
        }

        public IEnumerable<Ship> GetHullDesginationList()
        {
            var getFunTypeSelectList = _dbContext.Ship.OrderBy(o => o.HullDesignation);
            return getFunTypeSelectList;
        }

        public List<SsrnmTrial> GetAtlanticFleetCompletedTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var allAtlanticTrial = _dbContext.SsrnmTrial.Include(s => s.Ship).Where(w => w.Ship.Fleet.FleetId == 1); // get all Atlantic Trial results
            var ssrnm_pcon_special = allAtlanticTrial.Where(w => w.TrialTypeId == 1 || w.TrialTypeId == 2 || w.TrialTypeId == 3); //filter by SSRNM or PCON or SPECIAL
            var completedTrials = ssrnm_pcon_special.Where(w => w.TrialStatusDescriptionId == 2 && w.TrialDate <= fiscalYearEnd).OrderByDescending(o => o.TrialDate).Take(15);
            return completedTrials.ToList();
        }
        public List<SsrnmTrial> GetAtlanticFleetPotentialTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var allAtlanticTrial = _dbContext.SsrnmTrial
                .Include(s => s.Ship)
                .Where(w => w.Ship.Fleet.FleetId == 1); // get all Atlantic Trial results
            var ssrnm_pcon_special = allAtlanticTrial
                .Where(w => w.TrialTypeId == 1 || w.TrialTypeId == 2 || w.TrialTypeId == 3); //filter by SSRNM or PCON or SPECIAL
            var potentialTrials = ssrnm_pcon_special
                .Where(w => w.TrialStatusDescriptionId == 1 && w.TrialDate <= fiscalYearEnd)
                .OrderByDescending(o => o.TrialDate)
                .Take(15);
            return potentialTrials.ToList();
        }
        public List<SsrnmTrial> GetAtlanticFleetCancelledTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var allAtlanticTrial = _dbContext.SsrnmTrial
                .Include(s => s.Ship)
                .Where(w => w.Ship.Fleet.FleetId == 1); // get all Atlantic Trial results
            var ssrnm_pcon_special = allAtlanticTrial
                .Where(w => w.TrialTypeId == 1 || w.TrialTypeId == 2 || w.TrialTypeId == 3); //filter by SSRNM or PCON or SPECIAL
            var cancelledTrials = ssrnm_pcon_special
                .Where(w => w.TrialStatusDescriptionId == 3 && w.TrialDate <= fiscalYearEnd)
                .OrderByDescending(o => o.TrialDate)
                .Take(15);
            return cancelledTrials.ToList();
        }

        public List<SsrnmTrial> GetPacificFleetCompletedTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var completedTrials = from ssrnmtrial in _dbContext.SsrnmTrial
                                  join ship in _dbContext.Ship on ssrnmtrial.ShipId equals ship.ShipId
                                  where ship.FleetId == 2
                                   && (ssrnmtrial.TrialTypeId == 1 || ssrnmtrial.TrialTypeId == 2 || ssrnmtrial.TrialTypeId == 3)
                                   && ssrnmtrial.TrialStatusDescriptionId == 2
                                  select ssrnmtrial;
            return completedTrials
                .Where(w => w.TrialDate <= fiscalYearEnd)
                .OrderByDescending(o => o.TrialDate)
                .Take(15)
                .ToList();
        }
        public List<SsrnmTrial> GetPacificFleetPotentialTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var completedTrials = from ssrnmtrial in _dbContext.SsrnmTrial
                                  join ship in _dbContext.Ship on ssrnmtrial.ShipId equals ship.ShipId
                                  where ship.FleetId == 2
                                   && (ssrnmtrial.TrialTypeId == 1 || ssrnmtrial.TrialTypeId == 2 || ssrnmtrial.TrialTypeId == 3)
                                   && ssrnmtrial.TrialStatusDescriptionId == 1
                                  select ssrnmtrial;
            return completedTrials
                .Where(w => w.TrialDate <= fiscalYearEnd)
                .OrderByDescending(o => o.TrialDate)
                .Take(15)
                .ToList();
        }
        public List<SsrnmTrial> GetPacificFleetCancelledTrials()
        {
            var currentDate = DateTime.Now;
            var fiscalYearEnd = new DateTime(currentDate.Year, 9, 30).Date;
            var completedTrials = from ssrnmtrial in _dbContext.SsrnmTrial
                                  join ship in _dbContext.Ship on ssrnmtrial.ShipId equals ship.ShipId
                                  where ship.FleetId == 2
                                   && (ssrnmtrial.TrialTypeId == 1 || ssrnmtrial.TrialTypeId == 2 || ssrnmtrial.TrialTypeId == 3)
                                   && ssrnmtrial.TrialStatusDescriptionId == 3
                                  select ssrnmtrial;
            return completedTrials
                .Where(w => w.TrialDate <= fiscalYearEnd)
                .OrderByDescending(o => o.TrialDate)
                .Take(15)
                .ToList();
        }


        #region Atlantic Fleet Not ASWOveriew Trial 

        //public List<AtlanticNonASWOverviewViewModel> GetAtFNonAswOverview()
        //{
        //    var ssrnmTrial = _dbContext.SsrnmTrial.Include(i => i.Ship)
        //        .Where(w => w.Ship.Fleet.FleetId == 1   // FleetId 1 is Atlantic  
        //                   && w.Ship.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active    
        //                   && w.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
        //                   && (w.TrialType.TrialTypeId == 1 || w.TrialType.TrialTypeId == 2 || w.TrialType.TrialTypeId == 3))
        //       .GroupBy(g => g.Ship.HullDesignation)
        //       .Select(s => new AtlanticNonASWOverviewViewModel
        //       {
        //           shipId = s.FirstOrDefault().ShipId,
        //           shipname = s.FirstOrDefault().Ship.ShipName,
        //           hullDesignation = s.FirstOrDefault().Ship.HullDesignation,
        //           //trialDate = s.FirstOrDefault().TrialDate,
        //           trialDate = (s.FirstOrDefault().TrialDate),
        //           qLMessage = s.FirstOrDefault().CMsgPdf,
        //           report = s.FirstOrDefault().ReportPdf
        //       })
        //       .OrderBy(o => o.hullDesignation).ToList();

        //    return ssrnmTrial; 
        //}
        //public List<AtlanticNonASWOverviewViewModel> Maybethiswillwork()
        //{
        //    var query = from ssrmtrial in _dbContext.SsrnmTrial
        //                join ship in _dbContext.Ship on ssrmtrial.ShipId equals ship.ShipId into SsrmtrialShip
        //                where ssrmtrial.Ship.Fleet.FleetId == 1   // FleetId 1 is Atlantic  
        //                   && ssrmtrial.Ship.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active  
        //                   && ssrmtrial.Ship.ShipClass.ShipClassTypeId == 2 //ShipClassTypeId 2 is NonASW
        //                   && ssrmtrial.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
        //                   && (ssrmtrial.TrialType.TrialTypeId == 1 || ssrmtrial.TrialType.TrialTypeId == 2 || ssrmtrial.TrialType.TrialTypeId == 3)
        //                group new { ssrmtrial, SsrmtrialShip } by new
        //                {
        //                    ssrmtrial.Ship.HullDesignation,
        //                    ssrmtrial.Ship.ShipName,
        //                    ssrmtrial.ShipId,
        //                    ssrmtrial.TrialDate,
        //                    ssrmtrial.CMsgPdf,
        //                    ssrmtrial.ReportPdf

        //                } into g
        //                orderby g.Key.HullDesignation
        //                select new AtlanticNonASWOverviewViewModel()
        //                {
        //                    shipId = g.Key.ShipId,
        //                    hullDesignation = g.Key.HullDesignation,
        //                    trialDate = g.Select(sm => sm.ssrmtrial).Max(m => m.TrialDate),
        //                    //trialDate=g.Key.TrialDate,
        //                    shipname = g.Key.ShipName,
        //                    qLMessage = g.Key.CMsgPdf,
        //                    report = g.Key.ReportPdf

        //                };

        //    return query.ToList();




        //}

        #endregion Atlantic Fleet Not ASWOveriew Trial 

        /// <summary>
        /// Atlantic Fleet Non ASWOver Trial Records
        /// </summary>
        /// <returns>Max trialdate group by hulldesignation</returns>
        public List<SsrnmTrial> GetAtlanticFleetNonASWOverview()
        {
            var query = from ssrmtrial in _dbContext.SsrnmTrial
                        join ship in _dbContext.Ship on ssrmtrial.ShipId equals ship.ShipId into SsrmtrialShip
                        where ssrmtrial.Ship.Fleet.FleetId == 1   // FleetId 1 is Atlantic  
                           && ssrmtrial.Ship.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active  
                           && ssrmtrial.Ship.ShipClass.ShipClassTypeId == 2 //ShipClassTypeId 2 is NonASW
                           && ssrmtrial.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
                           && (ssrmtrial.TrialType.TrialTypeId == 1 || ssrmtrial.TrialType.TrialTypeId == 2 || ssrmtrial.TrialType.TrialTypeId == 3)
                        group ssrmtrial by ssrmtrial.Ship.HullDesignation into g
                        select g.OrderByDescending(o => o.TrialDate).FirstOrDefault();
            var orderbytrialdate = query.OrderBy(o => o.TrialDate).Take(15);
            return orderbytrialdate.ToList();
        }

        #region Altantic Fleet ASWOverView Trials
        //public List<SsrnmTrial> GetAtlanticFleetASWOverivew()
        //{
        //    var ssrnmTrial = _dbContext.SsrnmTrial.Include(i => i.Ship)
        //        .Where(w => w.Ship.Fleet.FleetId == 1   // FleetId 1 is Atlantic  
        //                && w.Ship.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active  
        //                && w.Ship.ShipClass.ShipClassTypeId == 1 //ShipClassTypeId 1 is ASW
        //                && w.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
        //                && (w.TrialType.TrialTypeId == 1 || w.TrialType.TrialTypeId == 2 || w.TrialType.TrialTypeId == 3));
        //    return ssrnmTrial.ToList();
        //}

        #endregion Altantic Fleet ASWOverView Trials

        /// <summary>
        /// Atlantic Fleet ASW Overview Trial Records
        /// </summary>
        /// <returns>Max trialdate group by hulldesignation</returns>
        public List<SsrnmTrial> GetAtlanticFASWoverview()
        {
            var ssrnmTrial = from st in _dbContext.SsrnmTrial
                             join s in _dbContext.Ship on st.ShipId equals s.ShipId
                             where s.Fleet.FleetId == 1   // FleetId 1 is Atlantic  
                             && s.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active    
                             && st.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
                             && st.Ship.ShipClass.ShipClassTypeId == 1 // ShipClassTypeId 1 is ASW
                             && (st.TrialType.TrialTypeId == 1 || st.TrialType.TrialTypeId == 2 || st.TrialType.TrialTypeId == 3)
                             group st by st.Ship.HullDesignation into g
                             select g.OrderByDescending(o => o.TrialDate).FirstOrDefault();

            var orderbytrialdate = ssrnmTrial.OrderBy(o => o.TrialDate).Take(15);
            return orderbytrialdate.ToList();
        }

        public List<SsrnmTrial> GetPacificFleetNonASWOverview()
        {

            var query = from ssrmtrial in _dbContext.SsrnmTrial
                        join ship in _dbContext.Ship on ssrmtrial.ShipId equals ship.ShipId into SsrmtrialShip
                        where ssrmtrial.Ship.Fleet.FleetId == 2   // FleetId 2 is Pacific  
                           && ssrmtrial.Ship.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active  
                           && ssrmtrial.Ship.ShipClass.ShipClassTypeId == 2 //ShipClassTypeId 2 is NonASW
                           && ssrmtrial.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
                           && (ssrmtrial.TrialType.TrialTypeId == 1 || ssrmtrial.TrialType.TrialTypeId == 2 || ssrmtrial.TrialType.TrialTypeId == 3)
                        group ssrmtrial by ssrmtrial.Ship.HullDesignation into g
                        select g.OrderByDescending(o => o.TrialDate).FirstOrDefault();
            var orderbytrialdate = query.OrderBy(o => o.TrialDate).Take(15);
            return orderbytrialdate.ToList();
        }

        public List<SsrnmTrial> GetPacificFleetASWoverview()
        {
            var ssrnmTrial = from st in _dbContext.SsrnmTrial
                             join s in _dbContext.Ship on st.ShipId equals s.ShipId
                             where s.Fleet.FleetId == 2   // FleetId 2 is Pacific
                             && s.ShipStatus.ShipStatusId == 1  //ShipStatusId 1 is Active    
                             && st.TrialStatusDescription.TrialStatusDescriptionId == 2 //TrialStatusDescriptionId 2 is COMPLETED
                             && st.Ship.ShipClass.ShipClassTypeId == 1 // ShipClassTypeId 1 is ASW
                             && (st.TrialType.TrialTypeId == 1 || st.TrialType.TrialTypeId == 2 || st.TrialType.TrialTypeId == 3)
                             group st by st.Ship.HullDesignation into g
                             select g.OrderByDescending(o => o.TrialDate).FirstOrDefault();

            var orderbytrialdate = ssrnmTrial.OrderBy(o => o.TrialDate).Take(15);
            return orderbytrialdate.ToList();
        }

        #endregion

    }
}

